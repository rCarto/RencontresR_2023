---
title: "L'écosystème spatial de R"
subtitle: "Rencontres R - Avignon"
author: "Timothée Giraud"
institute: RIATE - CNRS</br><img src="img/logos-footer.png" width="250" />
title-slide-attributes:
  data-background-image: img/logo_RR.png
  data-background-size: 5%
  data-background-position: 2% 2%
  
format: 
  revealjs:
    fig-align: center
    smaller: true
    theme : [custom.scss]
    show-slide-number: all
    slide-number: true
    code-line-numbers: false
    width: 1050
    height: 700

execute:
  echo: true
  output: true
  warning: true
  include: true
  cache: true
  
bibliography: references.bib
date: 23 06 2023
date-format: "D MMM YYYY"
lang: fr
logo: "img/logo_RR.png"
csl: "universite-de-montreal-apa.csl"
knitr:
  opts_chunk: 
    fig.path: "figs/"
    cache.path: "cache/"
    fig.align: "center"
    comment: "" 
highlight-style: kate
---


# 


## Quelques repères historiques 

- avant 2003 : `spatial`, `sgeostat`, `splancs`, `akima`, `geoR`, `spatstat`, `spdep`, `maptools`.   
- 2003 : `rgdal` [@R-rgdal], interface entre R et GDAL/PROJ4  
- 2005 : `sp` [@R-sf], classes et méthodes dédiées aux objets spatiaux, **adoption rapide** 
- 2008 : support de `sp` par `ggplot2` 
- 2010 : `rgeos` [@R-rgeos], interface entre R et GEOS.   
- 2010 : `raster` [@R-raster], support des données raster
- 2016 : <u>`sf`</u> [@R-sf], remplace `sp`, `rgdal` et `rgeos`
- 2018 : <u>`stars`</u> [@pebesma2023], remplace `raster`
- 2020 : <u>`terra`</u> [@R-terra], remplace aussi `raster`




## Rappel (?) sur les données spatiales

::: columns
::: {.column width="49%"}
### Raster

C'est une **image localisée dans l'espace**.

L'information géographique est alors stockée dans des pixels.


Chaque pixel, **défini par une résolution**, possède des valeurs qui peuvent être traitées et cartographiées.
:::

::: {.column width="51%"}
![](img/raster.png)
:::
:::


## Rappel (?) sur les données spatiales

::: columns
::: {.column width="49%"}
### Vecteur

Il s'agit d'objets géométriques de type **points**, **lignes** ou **polygones**.

Ces objets vectoriels ne **pixellisent pas**.

Chaque objet est défini par **un identifiant unique**.
:::

::: {.column width="49%"}
![](img/vecteur.png)
:::
:::


## Vecteur et raster {.nostretch}


![@lambert2016](img/raster_vecteur.png)



## Le socle de l'écosystème
::: columns

::: {.column width="25%"}

Des bibliothèques géographiques largement utilisées : 

* GDAL - Geospatial Data Abstraction Library [@GDAL]
* PROJ - Coordinate Transformation Software [@PROJ] 
* GEOS - Geometry Engine - Open Source [@GEOS]

:::

::: {.column width="50%"}
![@pebesma2023 [chap. 1.7]](img/sf_deps.png)
:::

::: {.column width="25%"}
::: {.callout-caution title="Il s'agit de dépendances externes"}
* Installation
* Reproductibilité  

Envisager la conteneurisation [@nust2021].
:::
:::
:::



## rgdal, rgeos, maptools {.nostretch}

![[Upcoming changes to popular R packages for spatial data: what you need to do](https://geocompx.org/post/2023/rgdal-retirement/)](img/rgdal_jak.png)

## rgdal, rgeos, maptools

::: columns
::: {.column width="65%"}

Pour accompagner le processus d'archivage des packages :

- Une série de posts de blog (avril 2022, décembre 2022, avril 2023, mai 2023)
- Plusieurs talks dans des conférences
- Communications directes aux auteurs de packages dépendants (emails, issues)
- Message au démarrage des packages :

<small>
```{r exemple_rgeos}
#| echo: true
#| cache: false
#| output-location: column
library(rgeos)
```
</small>

:::
::: {.column width="35%"}

```{r rev_dep}
#| echo: false
library(crandep)
core <- c("sf", "terra", "stars", "raster", "rgdal", "rgeos")
l <- vector("list", length(core))
for (i in seq_along(l)){
  l[[i]] <- get_dep(name = core[i], type = c("Reverse imports", 
                                             "Reverse depends",
                                             "Reverse Suggests"), 
                    scrape = TRUE)
}
deps <- do.call(rbind, l)
ref <- data.frame(Type = c("Depends", "Imports", "Suggests"), 
                  id = c("depends", "imports", "suggests"))

x <- table(deps$from, deps$type)
x <- as.data.frame(as.data.frame.matrix(x))
x$total <- apply(x, 1, sum)
x <- x[order(x$import, decreasing = T),]
tab <- data.frame(t(x))
tab$id <- row.names(tab)
ref <- merge(ref, tab, by = "id")
library(gt)
gt(data = ref[,c("Type", "sf", "stars", "terra", "raster", "rgdal", "rgeos")], ) |> 
  tab_header("Reverse Dependencies") |> 
  tab_source_note("Source : CRAN, 22 juin 2023")
```

:::
:::

## Le package `sf` {.nostretch}


::: columns

::: {.column width="20%"}

![](img/logo_sf.gif)

Publié fin 2016 par Edzer Pebesma. 


:::

::: {.column width="50%"}
![© Allison Horst, 2018](img/sf_nice.jpg)
:::

::: {.column width="30%"}
**Principales fonctionnalités**

* import / export
* affichage
* géotraitements
* support des données non projetées (sur le globe)
* utilisation du standard [*simple feature*](https://en.wikipedia.org/wiki/Simple_Features)
- compatibilité avec le *pipe*  
(`|>` ou `%>%`)
- compatibilité avec les opérateurs du `tidyverse`. 



:::
:::



```{r knit_init}
#| include: false
#| cache: false
knitr::knit_hooks$set(nomar = function(before, options, envir){
  if (before){
    par(mar=c(0,0,0,0))
  } 
})
```

## Format {.nostretch}


![[Simple Features for R Vignette](https://r-spatial.github.io/sf/articles/sf1.html)](img/sf.png){width="75%"}

Les objets `sf` sont des `data.frame` dont l'une des colonnes contient des géométries.  
Format très pratique, les données et les géométries sont intrinsèquement liées dans un même objet.




## Import

```{r sf_import}
#| eval: true
#| cache: false
library(sf)
mtq <- st_read(dsn = "data/mtq.gpkg", layer = "mtq")
```
</br>
Les principaux formats de fichier sont pris en charge


## Affichage 
```{r sf_plot_multi}
#| fig-height: 2
#| nomar: true

plot(mtq)
```

```{r sf_plot}
#| fig-height: 2
#| nomar: true
plot(st_geometry(mtq))
```


## Centroides

```{r sf_centro}
#| warning: false
#| nomar: true
#| code-line-numbers: "1"
mtq_c <- st_centroid(mtq)
plot(st_geometry(mtq))
plot(st_geometry(mtq_c), cex = 1.2, 
     col = "red", pch = 20, 
     add = TRUE)
```

## Matrice de distance

```{r sf_matrix}
#| code-line-numbers: "1"
mat <- st_distance(x = mtq_c, y = mtq_c)
mat[1:5, 1:5]
```

## Agrégation

```{r sf_agg}
#| code-line-numbers: "1"
#| nomar: true
mtq_u <- st_union(mtq)
plot(st_geometry(mtq), col = "lightblue")
plot(st_geometry(mtq_u), lwd = 2, border = "red", add = TRUE)
```

## Zone tampon

```{r sf_buff}
#| code-line-numbers: "1"
#| nomar: true
mtq_b <- st_buffer(x = mtq_u, dist = 5000)
plot(st_geometry(mtq_b), col = "grey", lwd = 2, border = "red")
plot(st_geometry(mtq), col = "lightblue", add = TRUE)
plot(st_geometry(mtq_u), lwd = 2, add = TRUE)
```

## Intersection
::: columns
::: {.column width="30%"}
```{r sf_interse}
#| echo: false
#| fig-height: 14
#| nomar: true
m <- rbind(c(700015,1624212), c(700015,1641586), 
           c(719127,1641586), c(719127,1624212), 
           c(700015,1624212))
p <- st_sf(st_sfc(st_polygon(list(m))), crs = st_crs(mtq))
plot(st_geometry(mtq))
plot(p, border="red", lwd=4, add=T)
text(719127,1641586, "p", pos = 4, cex = 3)
```
:::

::: {.column width="60%"}
```{r sf_intersect2}
#| warning: false
#| nomar: true
#| layout-ncol: 2
#| fig-height: 10
#| code-line-numbers: "1"
mtq_z <- st_intersection(x = mtq, y = p)
plot(st_geometry(mtq))
plot(st_geometry(mtq_z), col = "red", 
     lwd = 2, add = TRUE)
plot(st_geometry(mtq_z), lwd = 2)
```
:::
:::


## Polygones de Voronoi

```{r sf_voronoix}
#| nomar: true
mtq_c |> 
  st_union() |> 
  st_voronoi() |> 
  st_collection_extract("POLYGON") |> 
  st_intersection(mtq_u) |> 
  st_sf() |> 
  st_join(mtq_c, st_intersects) |>
  st_cast("MULTIPOLYGON") |>
  st_geometry() |>
  plot(col = "ivory4")

```


## Le package `terra`

::: columns

::: {.column width="20%"}

![](img/logo_terra.png)

Le package `terra` permet de gérer des données vectorielles et surtout **raster**. 

Il succède au package `raster` [@R-raster] du même auteur.


:::

::: {.column width="50%"}
![[rspatial.org](https://rspatial.org/rs/2-exploration.html#single-band-and-composite-maps)](img/terra-multi.png)
:::

::: {.column width="30%"}
**Principales fonctionnalités**

- Affichage
- Modifications de la zone d'étude (projection, crop, mask, agrégation, fusion...)
- Algèbre spatial (opérations locales, focales, globales, zonales)
- Transformation et conversion (rasterisation, vectorisation)



:::
:::


## Import des données

```{r config_tera}
#| include: false
knitr::opts_chunk$set(fig.width=6, fig.height=6)
```


```{r import_terra}
#| layout-ncol: 2
#| code-line-numbers: 1-2
#| cache: false
library(terra)
alt_raw <- rast("data/altitude.tif") 
com <- vect("data/com46.gpkg", layer="com")
plot(alt_raw)
plot(com)
```

## Reprojection

```{r reproj_terra}
#| code-line-numbers: "1"
#| cache: false
alt <- project(x = alt_raw, y = "EPSG:2154", method = "bilinear")
plot(alt)
plot(com, add = TRUE)
```

## Crop

```{r crop-terra}
#| code-line-numbers: "2"
#| cache: false
cahors <- subset(com, com$INSEE_COM == "46042") 
alt_crop <- crop(alt, cahors)
plot(alt_crop)
plot(cahors, add=TRUE)
```



## Mask

```{r mask_terra}
#| cache: false
#| code-line-numbers: "1"
alt_mask <- mask(alt_crop, cahors)
plot(alt_mask)
plot(cahors, add=TRUE)
```


## Extract

```{r extract_terra}
#| code-line-numbers: "1"
stat_by_com <- extract(alt, com, fun = "min")
head(stat_by_com)
```


## Cartographie thématique

::: columns
::: {.column width="33%"}
![](img/logo_tmap.png){width="240px"}  
`tmap` [@R-tmap]
:::
::: {.column width="33%"} 
![](img/logo_ggplot2.png){width="240px"}   
`ggplot2` + `ggspatial` [@R-ggspatial]
:::
::: {.column width="33%"}
![](img/logo_mapsf.png){width="240px"}  
`mapsf` [@R-mapsf]
:::
:::

D'autres packages : `mapmisc`, `choropletr`, `oceanis`... 

## Le package `mapsf` 

::: columns

::: {.column width="20%"}
![](img/logo_mapsf.png)

`mapsf` offre la plupart des types de carte utilisés habituellement.  

Successeur de `cartography` [@R-cartography].
:::

::: {.column width="40%"}
`mf_map()` est la fonction principale.

```r
mf_map(x = objet_sf,
       var = "variable",
       type = "map type",
       ...)
```

![](img/website.png)

:::
::: {.column width="3%"}
:::
::: {.column width="37%"}
**Fonctionnalités principales**
      
* 9 types de cartes
* Habillage (échelle, flèche nord...)
* Export (png et svg)
* Thèmes
* Insets
* Labels


![](img/mapsf_cheatsheet.png)
:::

:::



## Utilisation simple
```{r mapsf_simple1}
#| fig-width: 5
#| fig.height: 6
#| output-location: column-fragment
#| code-line-numbers: 1-3|4-5
library(mapsf)
# Import the sample dataset
mtq <- mf_get_mtq()
# Plot the base map
mf_map(x = mtq)
```


## Utilisation simple
```{r mapsf_simple3}
#| fig-width: 5
#| fig.height: 6
#| output-location: column
#| code-line-numbers: 6-12
library(mapsf)
# Import the sample dataset
mtq <- mf_get_mtq()
# Plot the base map
mf_map(x = mtq)
# Plot proportional symbols
mf_map(
  x = mtq,
  var = "POP",
  type = "prop", 
  leg_title = "Population"
)

```


## Utilisation simple
```{r mapsf_simple4}
#| fig-width: 5
#| fig.height: 6
#| output-location: column
#| code-line-numbers: 13-20
library(mapsf)
# Import the sample dataset
mtq <- mf_get_mtq()
# Plot the base map
mf_map(x = mtq)
# Plot proportional symbols
mf_map(
  x = mtq,
  var = "POP",
  type = "prop", 
  leg_title = "Population"
)
# Plot a map layout
mf_layout(
  title = "Population in Martinique", 
  credits = 
    paste0("T. Giraud;",  
           "Sources: INSEE & IGN, 2018"
    )
)

```

## Utilisation avancée

::: columns
::: {.column width="50%"}
<small>
```{r mapsf_avance}
#| results: hide
#| code-overflow: scroll
# Export a map with a theme and extra margins
mf_theme("agolalight", bg = "ivory1")
mf_export(
  x = mtq, filename = "img/mtq.png",
  width = 600, res = 120,
  expandBB = c(0, 0, 0, .3)
)
# Plot a shadow
mf_shadow(mtq, col = "grey90", add = TRUE)
# Plot a choropleth map
mf_map(
  x = mtq, var = "MED", type = "choro",
  pal = "Dark Mint",
  breaks = "quantile",
  nbreaks = 6,
  leg_title = "Median Income\n(euros)",
  leg_val_rnd = -2,
  add = TRUE
)
# Start an inset map
mf_inset_on(x = "worldmap", pos = "right")
# Plot mtq position on a worldmap
mf_worldmap(mtq, col = "#0E3F5C")
# Close the inset
mf_inset_off()
# Plot a title
mf_title("Wealth in Martinique, 2015")
# Plot credits
mf_credits("T. Giraud\nSources: INSEE & IGN, 2018")
# Plot a scale bar
mf_scale(size = 5)
# Plot a north arrow
mf_arrow("topleft")
dev.off()
```
</small>
:::
::: {.column width="50%"}
![](img/mtq.png)
:::
:::


## Cartographie interactive

::: columns
::: {.column width="33%"}
![](img/logo_leaflet.png){width="240px"}  
`leaflet` [@R-leaflet], repose sur la bibliothèque JS leaflet
:::
::: {.column width="33%"} 
![](img/logo_mapview.gif){width="240px"}   
`mapview` [@R-mapview], repose sur le package `leaflet`
:::
::: {.column width="33%"}
![](img/mapdeck.gif){width="240px"}  
`mapdeck` [@R-mapdeck], repose sur les bibliothèques JS Mapbox GL et Deck.gl
:::
:::

`tmap` dispose d'un mode interactif (qui s'appuie sur le package `leaflet` aussi).


## Cartographie interactive

```{r mapview_true}
#| cache: false
#| include: false
library(mapview)
x <- mapview(mtq)
dir.create("html", showWarnings = F)
mapshot(x, url = "html/map.html")
```

```{r mapview_fake}
#| cache: true
#| echo: true
#| eval: false
library(mapview)
mapview(mtq)

```
<iframe src="html/map.html" width="500px" height="450px"></iframe>



## Cartographie interactive avec shiny 

![](img/cityguess.png)

[rcarto.shinyapps.io/cityguess](https://rcarto.shinyapps.io/cityguess/)


## Fond de carte {.nostretch}

::: columns

::: {.column width="20%"}
![](img/logo_maptiles.png)
Le package `maptiles` [@R-maptiles] permet de télécharger des fonds de carte (raster). 
:::

::: {.column width="60%"}
```{r maptiles}
#| include: false
#| eval: false
library(maptiles)
library(terra)
bbox <- terra::ext(c(xmin = 4.795, xmax = 4.825,
                     ymin = 43.94, ymax = 43.955))
tiles <- get_tiles(x = bbox, 
                   project = FALSE, 
                   crop = TRUE, 
                   zoom = 15, 
                   cachedir = "cache")
library(mapsf)
mf_theme(mar = c(0,0,0,0))
mf_export(x = tiles, filename = "img/tiles.png", 
          width = ncol(tiles), height = nrow(tiles))
mf_raster(tiles, add = T)
mf_credits(maptiles::get_credit("OpenStreetMap"), 
           bg = "white")
dev.off()

```

```{r maptiles_fake}
#| eval: false
#| code-line-numbers: 1,6-10
library(maptiles)
library(terra)
library(mapsf)
bbox <- terra::ext(c(xmin = 4.795, xmax = 4.825,
                     ymin = 43.94, ymax = 43.955))
tiles <- get_tiles(x = bbox, 
                   project = FALSE, 
                   crop = TRUE, 
                   zoom = 15, 
                   cachedir = "cache")
mf_raster(tiles)
mf_credits(get_credit("OpenStreetMap"), bg = "white")
```
 ![](img/tiles.png){width="350" height="243"}



:::

::: {.column width="20%"}
**Alternatives**

* `ceramic`
* `ggmap` (pour `ggplot2`)
* `ggspatial` (pour `ggplot2`, utilise `rosm`)
* `mapboxapi` (mapbox)
* `mapsapi` (google, utilise `RgoogleMaps`)
* `OpenStreetMap` (nécessite Java)
* `RgoogleMaps` (google)
* `rosm`
* …


:::
:::





## Palettes de couleurs

::: columns
::: {.column width="50%"}
**De nombreuses palettes sont directement disponibles dans R-base** et près de 70 (!) packages proposent des palettes.   

![`hcl.colors()`](img/swatch-plot-1.svg)

:::

::: {.column width="50%"}


- `paletteer` [@R-paletteer] propose 2587 palettes (!!!)
- `cols4all` [@R-cols4all] propose une app shiny

![`cols4all::c4a_gui()`](img/cols4all.png)
:::

:::


 

## Analyse spatiale / statistique spatiale {.nostretch}
::: columns
::: {.column width="50%"}
- `spatstat` : Analyse statistique de semis de points
- `gstat` : Variogram et Krigeage
- `rgeoda` : Geoda avec R
- `GWmodel`, `spgwr` : Geographically Weighted Models

:::
::: {.column width="50%"}
::: {.callout-tip title="CRAN Task View: Analysis of Spatial Data"}
* Spatial sampling
* Point pattern analysis
* Geostatistics
* Disease mapping and areal data analysis
* Spatial regression
* Ecological analysis
:::
:::
:::


::: {.callout-tip title="Session Geospatial à 11h!"}
![](img/sessiongeo.png){.nostretch}
:::

::: {.callout-tip title="La session Workflow a l'air cool aussi !"}

:::

## Télécharger des données spatiales

::: columns
::: {.column width="50%"}
**Maillages administratifs** :  
`rnaturalearth` pour les pays du monde  
`giscoR` pour les régions européennes  
`tigris`, `mapSpain`, `geobr`...  

**Données climatiques** :   
`geodata` (+ plein d'autres choses)

**Altitudes** :   
`elevatr` {{< fa solid triangle-exclamation >}}

**Occurences d'especes** :   
`spocc`

::: 
::: {.column width="50%"}
**Données eco / socio / démographique** :  
`wbstats` (World Bank)  
`eurostat`  
`rdhs` (santé)   
... 

**Données satellitaires** :   
`sen2r` (Sentinel-2)  
`MODIStsp` (MODIS)  
`rgee` (Google Earth Engine)  
`nasapower` (météo, climato)  

:::
:::

# Accessibilité des restaurants et des hotels dans le centre d'Avignon

## Acquisition des données 

::: columns

::: {.column width="30%"}

![](img/logo_osmdata.png){height=210 width=182}

Le package `osmdata` [@R-osmdata] utilise l'API du service [Overpass turbo](https://overpass-turbo.eu/) pour extraire des données de la BD OpenStreetMap.  
Nous utilisons le [système de clef/valeur d'OSM](https://wiki.openstreetmap.org/wiki) pour construire la requête.


:::

::: {.column width="70%"}
```{r mapsf_init}
#| include: false
#| cache: false
mapsf::mf_theme(mar = c(0,0,0,0))
```

```{r osm_download1}
#| cache: true
#| fig-width: 3
#| fig-height: 3
#| fig-align: center
library(mapsf)
library(osmdata)
(bbox_avignon <- getbb("Avignon, Quartier Centre"))
resto <-  bbox_avignon |> 
  opq(osm_types = "node")|>
  add_osm_feature(key = 'amenity', value = "restaurant") |>
  osmdata_sf() |>
  _$osm_points |>
  mf_map()
```

:::
:::


## OpenStreetMap  

::: columns

::: {.column width="20%"}
![](img/Openstreetmap_logo.svg.png)
Une base de données cartographique libre et contributive.  
:::

::: {.column width="40%"}

**Conditions d'utilisation**  

> OpenStreetMap est en *données libres* : vous êtes libre de l’utiliser dans n’importe quel but tant que vous créditez OpenStreetMap et ses contributeurs. Si vous modifiez ou vous appuyez sur les données d’une façon quelconque, vous pouvez distribuer le résultat seulement sous la même licence. (...)

**Contributions**   

> (...) Nos contributeurs incluent des cartographes enthousiastes, des professionnels du SIG, des ingénieurs qui font fonctionner les serveurs d’OSM, des humanitaires cartographiant les zones dévastées par une catastrophe et beaucoup d’autres. (...)

:::

::: {.column width="40%"}
**Couverture/complétude**

* Données France : 4,1 GB  
* Données Chine : 0,99 GB  
* Données Afrique : 5,8 GB  




<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/7sC83j6vzjo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

:::
:::


:::aside
Source : [https://www.openstreetmap.org/about](https://www.openstreetmap.org/about) & [Geofabrik](http://download.geofabrik.de/) (06/2023)

:::





## Densité des restaurants

Pour modéliser les variations de densités de restaurants dans le centre ville d'Avignon nous pouvons utiliser la méthode de lissage par noyaux (KDE) grâce au package `spatstat` [@R-spatstat].


```{r kde_step1}
#| message: false
#| warning: false
#| cache: false
library(sf)
library(spatstat)
resto <- st_transform(resto, "EPSG:3857")
p <- as.ppp(X = st_coordinates(resto), 
            W = as.owin(st_bbox(resto)))
ds <- density.ppp(x = p, sigma = 50, eps = 10, positive = TRUE)
plot(ds)

```


## Densité des restaurants {.scrollable}

On peut améliorer la représentation des résultats en les superposant à un fond de carte raster.  

```{r kde_to_rast}
#| eval: true
#| cache: false
#| code-fold: true
#| code-summary: "Transformation de l'image des densités en SpatRaster"
library(terra)
# densité en restaurants / hectares
r <- rast(ds) * 100 * 100
crs(r) <- st_crs(resto)$wkt
```


```{r get_tiles_for_kde}
#| eval: true
#| cache: false
#| code-line-numbers: 1,3-7,11-13
#| code-fold: true
#| results: false
#| code-summary: "Téléchargement des tuiles et superposition"
library(maptiles)
library(mapsf)
tiles_osm <- get_tiles(r, 
                       provider = "CartoDB.Positron",
                       zoom = 15, 
                       crop = TRUE, 
                       cachedir = "cache")
mf_theme(mar = c(0,0,0,0), inner = TRUE)
mf_export(tiles_osm, filename = "img/avignon_dens1.png", 
          width = ncol(tiles_osm), height = nrow(tiles_osm))
mf_raster(tiles_osm, add = TRUE)
mf_raster(r, alpha = 0.6, add = TRUE)
mf_map(resto, add = TRUE)
dev.off()
```
![](img/avignon_dens1.png)

## Densité des restaurants {.scrollable}

::: columns

::: {.column width="20%"}
![](img/logo_mapiso.png)

Nous pouvons aussi transformer le raster des densités en polygones de plages de densités grâce au package `mapiso` [@R-mapiso]. 
:::

::: {.column width="80%"}

```{r mapiso}
#| eval: true
#| echo: true
#| results: false
#| cache: false
#| code-fold: true
#| code-line-numbers: 1,5-6
#| code-summary: "Transformation du raster en polygones"
library(mapiso)
# Limites des classes
maxval <- max(values(r))
bks <-  c(seq(0, floor(maxval), 1), maxval)
# Transformation du raster en polygones
iso_dens <- mapiso(r, breaks = bks)
# Suppression de la première classe ([0, 1[)
iso_dens <- iso_dens[-1, ]
# Affichage
mf_export(r, "img/iso_dens.png", width = ncol(r)*2)
mf_raster(r, add = TRUE)
mf_map(iso_dens, col = NA, add = TRUE)
dev.off()
```
![](img/iso_dens.png)

:::
:::

## Densité des restaurants {.nostretch}
La dernière étape consiste à superposer ces polygones au fond de carte. 

```{r mapiso_map}
#| eval: true
#| cache: false
#| code-fold: true
#| results: false
#| code-summary: "Cartographie"
#| code-line-numbers: 4-14
mf_export(tiles_osm, filename = "img/avignon_dens2.png", 
          width = 600, 
          expandBB = c(0,0,0,.5))
mf_raster(tiles_osm, add = TRUE)
mf_map(iso_dens, var = "isomin", type = "choro",
       breaks = bks[-1], border = "white",
       pal = "Teal", alpha = .9,
       leg_pos = "right",
       leg_val_rnd = 1,
       leg_title = paste0("Densité de restaurants dans\n",
                          "un voisinage gaussien (σ = 50m),\n",
                          "en restaurants par hectare"),
       add = TRUE)
mf_map(resto, cex = .5, add = TRUE)
mf_credits("T. Giraud, 2023\nOpenStreetMap contributors, 2023", 
           pos = "bottomright", bg = "white")
mf_scale(pos = "bottomleft", size = 250, unit = "m")
mf_arrow(pos = "topright")
mf_title("Densité des restaurants dans le centre-ville d'Avignon")
dev.off()
```

![](img/avignon_dens2.png)



## Acquisition de données pour un fond de carte vectoriel
::: columns
::: {.column width="20%"}
Nous pouvons aussi utiliser un fond de carte vectoriel.  
Ici nous allons préparer un fond de carte constitué : 

- des espaces verts
- des surfaces en eaux
- des routes et rails 
- des bâtiments
- des hotels et des restaurants
:::
::: {.column width="80%"}
```{r data-dwld}
#| eval: false
#| cache: true
#| code-fold: true
#| code-summary: "Acquisition des données OSM"
library(sf)
library(osmdata)
center <- data.frame(x=3903683, y=2329735) |>
  st_as_sf(coords = c("x","y"), crs = "EPSG:3035") |>
  st_buffer(dist = 1000)

bb <- st_transform(center,"EPSG:4326") |>
  st_bbox()

water <- opq(bbox = bb)|>
  add_osm_feature(key = 'natural', value = "water") |>
  osmdata_sf() |>
  unique_osmdata()

river <- c(st_geometry(water$osm_polygons),
           st_geometry(water$osm_multipolygons)) |>
  st_cast('MULTIPOLYGON') |>
  st_make_valid() |>
  st_transform(st_crs(center))|>
  st_intersection(center) |>
  st_union()

green <- opq(bbox = bb)|>
  add_osm_features(features = list(
    "leisure" = c("park", "garden"),
    "landuse" = c("cemetery", "grass", "forest"))
  ) |>
  osmdata_sf() |>
  unique_osmdata()

esp_vert <- st_geometry(green$osm_polygons) |>
  st_cast('MULTIPOLYGON') |>
  st_make_valid() |>
  st_transform(st_crs(center))|>
  st_intersection(center) |>
  st_union()

highway <- opq(bbox = bb)|>
  add_osm_feature(key = 'highway') |>
  osmdata_sf() |>
  unique_osmdata()

routes <- st_geometry(highway$osm_lines) |>
  st_cast('LINESTRING') |>
  st_make_valid() |>
  st_transform(st_crs(center))|>
  st_intersection(center) |>
  st_union() |>
  st_buffer(5) |>
  st_buffer(-3)

railway <- opq(bbox = bb)|>
  add_osm_feature(key = 'railway') |>
  osmdata_sf() |>
  unique_osmdata()

rail <- st_geometry(railway$osm_lines) |>
  st_cast('LINESTRING') |>
  st_make_valid() |>
  st_transform(st_crs(center))|>
  st_intersection(center) |>
  st_union()

building <- opq(bbox = bb)|>
  add_osm_feature(key = 'building') |>
  osmdata_sf() |>
  unique_osmdata()

batiments <- c(st_geometry(building$osm_polygons),
               st_geometry(building$osm_multipolygons)) |>
  st_cast('MULTIPOLYGON') |>
  st_make_valid() |>
  st_transform(st_crs(center))|>
  st_intersection(center) |>
  st_union()


restaurants <- opq(bbox = bb)|>
  add_osm_feature(key = 'amenity', value = "restaurant") |>
  osmdata_sf() |>
  unique_osmdata()
restaurants_points <- st_geometry(restaurants$osm_points) |>
  st_transform(st_crs(center))|>
  st_intersection(center)
restaurants_poly <- st_geometry(restaurants$osm_polygons) |>
  st_centroid() |>
  st_transform(st_crs(center))|>
  st_intersection(center)
resto <- c(restaurants_points, restaurants_poly)


tourism <- opq(bbox = bb)|>
  add_osm_feature(key = 'tourism', value = "hotel") |>
  osmdata_sf() |>
  unique_osmdata()

hotel_points <- tourism$osm_points[, "name"] |>
  st_set_agr("constant") |>
  st_transform(st_crs(center))|>
  st_intersection(center)
hotel_poly <- rbind(tourism$osm_polygons[, "name"],
                    tourism$osm_multipolygons[, "name"]) |>
  st_set_agr("constant") |>
  st_centroid() |>
  st_transform(st_crs(center))|>
  st_intersection(center)
hotel <- rbind(hotel_points, hotel_poly)


st_write(obj = hotel, dsn = "data/avignon.gpkg", layer = "hotel")
st_write(obj = resto, dsn = "data/avignon.gpkg", layer = "resto")
st_write(obj = batiments, dsn = "data/avignon.gpkg", layer = "batiments")
st_write(obj = rail, dsn = "data/avignon.gpkg", layer = "rail")
st_write(obj = routes, dsn = "data/avignon.gpkg", layer = "routes")
st_write(obj = esp_vert, dsn = "data/avignon.gpkg", layer = "esp_vert")
st_write(obj = river, dsn = "data/avignon.gpkg", layer = "river")
st_write(obj = center, dsn = "data/avignon.gpkg", layer = "center")

```


```{r silent_osm_import}
#| include: false
center <- st_read(dsn = "data/avignon.gpkg", layer = "center")
hotel <- st_read(dsn = "data/avignon.gpkg", layer = "hotel")
resto <- st_read(dsn = "data/avignon.gpkg", layer = "resto")
batiments <- st_read(dsn = "data/avignon.gpkg", layer = "batiments")
rail <- st_read(dsn = "data/avignon.gpkg", layer = "rail")
routes <- st_read(dsn = "data/avignon.gpkg", layer = "routes")
esp_vert <- st_read(dsn = "data/avignon.gpkg", layer = "esp_vert")
river <- st_read(dsn = "data/avignon.gpkg", layer = "river")
```


Il suffit maintenant de combiner toutes ces couches pour constituer un fond de carte. 

```{r map_vecto_osm}
#| eval: true
#| code-fold: true
#| results: false
#| cache: false
#| code-summary: "Cartographie"
library(mapsf)
mf_theme("candy", bg ="#f7f7f7")
mf_export(center, "img/avignon.png", width = 768, res = 110)
mf_map(center, col = "#f2efe9", border = NA, add = TRUE)
mf_map(river, col = "#aad3df", border = "#aad3df", lwd = .5, add = TRUE)
mf_map(esp_vert, col = "#c8facc", border = "#c8facc", lwd = .5, add = TRUE)
mf_map(rail, col = "grey50", lty = 2, lwd = .2, add = TRUE)
mf_map(routes, col = "white", border = "white", add = TRUE)
mf_map(batiments, col = "#d9d0c9", border = "#c6bab1", lwd = 1, add = TRUE)
mf_map(hotel, col = "white", bg = "#000094", 
       pch = 21, lwd = 1, cex = 1, add = TRUE)
mf_map(resto, col = "white", bg = "#940010", 
       pch = 23, lwd = 1, cex = 1, add = TRUE)
mf_map(center, col = NA, border = "grey25", lwd = 4, add = TRUE)
mf_title("Avignon")
mf_credits("T. Giraud, 2023\nOpenStreetMap contributors, 2023")
mf_scale(100, unit = "m")
mf_arrow(pos = "topright")
mf_legend(type = "symb", pos = "bottomright2", 
          val = c("Hotels", "Restaurants"),
          pal = c("#000094", "#940010"), 
          pt_cex = c(1, 1), pt_pch = c(21, 23),
          border = "white", title = "", val_cex = 1)
dev.off()
```

![](img/avignon.png){width=400}

:::
:::


## De l'hotel à la conf... {.scrollable .nostretch}

Nous voulons connaître tous les chemins empruntés par les conférenciers pour se rendre au Rencontres R 2023!

::: columns
::: {.column width="20%"}
![](img/logo_tidygeocoder.png)

Le package `tidygeocoder` [@R-tidygeocoder] permet d'utiliser [un grand nombre de services de géocodage en ligne](https://jessecambon.github.io/tidygeocoder/articles/geocoder_services.html). 

:::
::: {.column width="80%"}

```{r tidygeocoder}
#| eval: true
#| cache: true
#| code-line-numbers: "2"
library(tidygeocoder)
(conf <- geo("74 rue Louis Pasteur, 84000 Avignon, FRANCE"))
```



```{r pos_conf}
#| eval: true
#| code-fold: true
#| results: false
#| cache: false
#| code-summary: "Positionnons la conf sur la carte"
library(sf)
geoconf <- st_as_sf(conf, coords = c("long", "lat"), crs = "EPSG:4326") |>
  st_transform(st_crs(center))
mf_export(center, "img/avignon_conf.png", width = 768, res = 110)
mf_map(center, col = "#f2efe9", border = NA, add = TRUE)
mf_map(river, col = "#aad3df", border = "#aad3df", lwd = .5, add = TRUE)
mf_map(esp_vert, col = "#c8facc", border = "#c8facc", lwd = .5, add = TRUE)
mf_map(rail, col = "grey50", lty = 2, lwd = .2, add = TRUE)
mf_map(routes, col = "white", border = "white", add = TRUE)
mf_map(batiments, col = "#d9d0c9", border = "#c6bab1", lwd = 1, add = TRUE)
mf_map(geoconf, col = "white", bg = "#646400", pch = 22, lwd = 1, cex = 4, add = TRUE)
mf_map(hotel, col = "white", bg = "#000094", pch = 21, lwd = 1, cex = 1, add = TRUE)
mf_map(center, col = NA, border = "grey25", lwd = 4, add = TRUE)
mf_title("Rencontres R 2023")
mf_credits("T. Giraud, 2023\nOpenStreetMap contributors, 2023")
mf_scale(250, unit = "m")
mf_arrow(pos = "topright")
dev.off()
```

![](img/avignon_conf.png){width=400}
:::
:::

## De l'hotel à la conf... {.scrollable .nostretch}


::: columns
::: {.column width="20%"}
![](img/logo_osrm.png)

Le package `osrm` [@R-osrm] permet de calculer des trajets par le plus court chemin en s'appuyant sur les données d'OSM. 

:::
::: {.column width="80%"}

```{r osrm1}
#| eval: true
#| cache: true
#| code-fold: true
#| message: false
#| results: false
#| code-summary: "Calcul des routes"
#| code-line-numbers: 1,5-8
#| fig-width: 3
#| fig-height: 3
library(osrm)
n <- nrow(hotel)
routes_hotel <- vector("list", n)
for (i in 1:n) {
  routes_hotel[[i]] <- osrmRoute(src = hotel[i, ],
                                 dst = geoconf,
                                 overview = "full",
                                 osrm.profile = 'foot')
  Sys.sleep(1)
}
routes_hotel <- do.call(rbind, routes_hotel)
```

```{r osrm2}
#| eval: true
#| code-fold: true
#| results: false
#| code-summary: "Cartographie des routes"
mf_export(center, "img/avignon_routes.png", width = 768, res = 110)
mf_map(center, col = "#f2efe9", border = NA, add = TRUE)
mf_map(river, col = "#aad3df", border = "#aad3df", lwd = .5, add = TRUE)
mf_map(esp_vert, col = "#c8facc", border = "#c8facc", lwd = .5, add = TRUE)
mf_map(rail, col = "grey50", lty = 2, lwd = .2, add = TRUE)
mf_map(routes, col = "white", border = "white", add = TRUE)
mf_map(batiments, col = "#d9d0c9", border = "#c6bab1", lwd = 1, add = TRUE)
mf_map(routes_hotel, col = "#940000", lwd = 2, add = TRUE)
mf_map(hotel, col = "white", bg = "#000094", pch = 21, lwd = 1, cex = 1, add = TRUE)
mf_map(geoconf, col = "white", bg = "#646400", pch = 22, lwd = 1, cex = 3, add = TRUE)
mf_map(center, col = NA, border = "grey25", lwd = 4, add = TRUE)
mf_title("Toutes les routes mènent aux Rencontres R")
mf_credits("T. Giraud, 2023\nOpenStreetMap contributors, 2023")
mf_scale(100, unit = "m")
mf_arrow(pos = "topright")
dev.off()

```


![](img/avignon_routes.png){width=400}
:::
:::

## De l'hotel à la conf... {.scrollable .nostretch}
::: columns
::: {.column width="20%"}
![](img/logo_stplanr.png)

Il est possible d'agréger les tronçons empruntés par plusieurs routes grâce au package `stplanr` [@R-stplanr]. 

:::
::: {.column width="80%"}
```{r stplanr}
library(stplanr)
routes_hotel$w <- 1
routes_hotel_ag <- overline2(routes_hotel, "w")
```

Nous pouvons ensuite cartographier ces tronçons agrégés par classes de taille.
```{r stplanr_map}
#| eval: true
#| code-fold: true
#| code-summary: "Cartographie"
#| code-line-numbers: 8-13
#| results: false
mf_export(center, "img/avignon_routes_ag.png", width = 768, res = 110)
mf_map(center, col = "#f2efe9", border = NA, add = TRUE)
mf_map(river, col = "#aad3df", border = "#aad3df", lwd = .5, add = TRUE)
mf_map(esp_vert, col = "#c8facc", border = "#c8facc", lwd = .5, add = TRUE)
mf_map(rail, col = "grey50", lty = 2, lwd = .2, add = TRUE)
mf_map(routes, col = "white", border = "white", add = TRUE)
mf_map(batiments, col = "#d9d0c9", border = "#c6bab1", lwd = 1, add = TRUE)
mf_map(routes_hotel_ag, var = "w", type = "grad",
       breaks = c(1,5,10,20,30,33),
       lwd = c(2,5,9,13,19), 
       leg_pos = "topleft", col= "#940000",
       leg_title = 'Nombre de trajets\nempruntant la voie', 
       add = TRUE)
mf_map(hotel, col = "white", bg = "#000094", pch = 21, lwd = 1, cex = 1, add = TRUE)
mf_map(geoconf, col = "white", bg = "#646400", pch = 22, lwd = 1, cex = 3, add = TRUE)
mf_map(center, col = NA, border = "grey25", lwd = 4, add = TRUE)
mf_title("Toutes les routes mènent aux Rencontres R")
mf_credits("T. Giraud, 2023\nOpenStreetMap contributors, 2023")
mf_scale(100, unit = "m")
mf_arrow(pos = "topright")
dev.off()
```

![](img/avignon_routes_ag.png){width=400}



:::
:::

# Ressources


## Geocomputation with R


::: columns

::: {.column width="40%"}

![](img/GeocomputationwithR.png)

:::
::: {.column width="30%"}

{{< fa solid users >}} @lovelace2019   

{{< fa solid link >}} [r.geocompx.org](https://r.geocompx.org/)  

{{< fa solid plus >}} [Première partie en français](https://r.geocompx.org/fr/)   

:::
:::

## Spatial Data Science with applications in R

::: columns

::: {.column width="40%"}

![](img/sdsr.jpg)

:::
::: {.column width="30%"}

{{< fa solid users >}} @pebesma2023 

{{< fa solid link >}} [r-spatial.org/book](https://r-spatial.org/book/)  

:::
:::


## Spatial Data Science with R and "terra"


::: columns

::: {.column width="40%"}

![](img/sds.png)

:::
::: {.column width="30%"}

{{< fa solid users >}} Robert J. Hijmans (2023) 

{{< fa solid link >}} [rspatial.org](https://rspatial.org/)

:::
:::













## Cartographie et Géomatique avec R

::: columns
::: {.column width="40%"}
![](img/carto_avec_r.png)

{{< fa solid users >}} @Giraud_Cartographie_avec_R_2023

{{< fa solid link >}} [rcarto.github.io/cartographie_avec_r](https://rcarto.github.io/cartographie_avec_r/)

:::
::: {.column width="40%"}

![](img/geom_avec_r.png)

{{< fa solid users >}} @Giraud_Geomatique_avec_R_2023

{{< fa solid link >}} [rcarto.github.io/geomatique_avec_r](https://rcarto.github.io/geomatique_avec_r/)

:::
:::

## Rzine {.nostretch}

::: columns

::: {.column width="20%"}

![](img/logo_rzine.png)

**[Rzine](https://rzine.fr) vise à Encourager la production et favoriser la diffusion de documentation sur la pratique de R en SHS.**

* Référencement de documents et supports divers.
* La collection Rzine : publications open source, *open peer review*.  

:::
::: {.column width="10%"}
:::
::: {.column width="60%"}
![](img/rzine.png)
:::
::: {.column width="10%"}
:::
:::



## ElementR

::: columns

::: {.column width="20%"}

![](img/logo_elementr.png)

[ElementR](https://elementr.netlify.app/) est un groupe d'autoformation qui fédère trois unités de recherche en géographie : l'UMR Géographie-Cités, l'UMR PRODIG et l'UAR RIATE.  
Ses activités sont accessibles à l'ensemble des membres du Campus Condorcet.
:::
::: {.column width="10%"}
:::
::: {.column width="60%"}
![](img/elementr.png)
:::
::: {.column width="10%"}
:::
:::



## Ressources

- [CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html)
- [R Special Interest Group on using Geographical data and Mapping](https://stat.ethz.ch/mailman/listinfo/r-sig-geo) (mailing list)
- [r-spatial blog](https://www.r-spatial.org/)
- [Progress in the R ecosystem for representing and handling spatial data](https://link.springer.com/article/10.1007/s10109-020-00336-0) [@bivand2021]


# Merci de votre attention {style="text-align: center"}

::: {style="font-size: 1.5em; text-align: center"}
{{< fa display >}} [rcarto.github.io/RencontresR_2023](https://rcarto.github.io/RencontresR_2023)


{{< fa brands mastodon >}} [\@rcarto\@fosstodon.org](https://fosstodon.org/\@rcarto)  


{{< fa blog >}} [rcarto.github.io](https://rcarto.github.io/)  


{{< fa brands github >}} [\@rcarto](https://github.com/rcarto)  

:::

::: footer
![](img/logo_by-sa.svg)  
<img src="img/logos-footer.png" width="250" />
:::


## Bibliographie {.scrollable}
